// src/api/bookings.js
const API_URL = 'http://localhost:3000/api/bookings';

const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
    };
};

// üì¶ R√©cup√©rer toutes les r√©servations
export const fetchBookings = async () => {
    const res = await fetch(API_URL, {
        headers: getAuthHeaders(),
    });
    if (!res.ok) throw new Error('Erreur lors du chargement des r√©servations');
    return res.json();
};

// ‚ûï Cr√©er une r√©servation
export const createBooking = async (data) => {
    const res = await fetch(API_URL, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(data),
    });
    if (!res.ok) throw new Error('Erreur lors de la cr√©ation de la r√©servation');
    return res.json();
};

// üîÅ Modifier le statut
export const updateBookingStatus = async (id, statusPayload) => {
    const res = await fetch(`${API_URL}/${id}/status`, {
        method: 'PATCH',
        headers: getAuthHeaders(),
        body: JSON.stringify(statusPayload),
    });
    if (!res.ok) throw new Error('Erreur lors de la mise √† jour du statut');
    return res.json();
};

// üîç D√©tail d'une r√©servation
export const getBookingById = async (id) => {
    const res = await fetch(`${API_URL}/${id}`, {
        headers: getAuthHeaders(),
    });
    if (!res.ok) throw new Error('R√©servation non trouv√©e');
    return res.json();
};


