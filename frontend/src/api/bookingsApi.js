// ‚úÖ CORRECTION de src/api/bookingsApi.js

const API_URL = 'http://localhost:3000/api/bookings';

const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
    };
};

// ‚úÖ R√©cup√©rer toutes les r√©servations avec filtres
export const fetchBookings = async (filters = {}) => {
    try {
        // ‚úÖ Utiliser POST pour les filtres (comme dans votre backend)
        const res = await fetch(`${API_URL}/filter`, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify(filters),
        });

        if (!res.ok) {
            throw new Error(`Erreur ${res.status}: ${res.statusText}`);
        }

        const data = await res.json();
        console.log('üìã R√©servations r√©cup√©r√©es:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration r√©servations:', error);
        throw error;
    }
};

// ‚úÖ Cr√©er une r√©servation (provider)
export const createBooking = async (data) => {
    try {
        const res = await fetch(API_URL, {
            method: 'POST',
            headers: getAuthHeaders(),
            body: JSON.stringify(data),
        });

        if (!res.ok) {
            throw new Error(`Erreur ${res.status}: ${res.statusText}`);
        }

        return res.json();
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation r√©servation:', error);
        throw error;
    }
};

// ‚úÖ Cr√©er une r√©servation publique (client)
export const createPublicBooking = async (bookingData) => {
    try {
        console.log('üìù Cr√©ation r√©servation publique:', bookingData);

        const res = await fetch('http://localhost:3000/api/public/bookings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(bookingData),
        });

        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.message || `Erreur ${res.status}`);
        }

        const data = await res.json();
        console.log('‚úÖ R√©servation cr√©√©e:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation r√©servation publique:', error);
        throw error;
    }
};

// ‚úÖ Modifier le statut d'une r√©servation
export const updateBookingStatus = async (id, statusData) => {
    try {
        const res = await fetch(`${API_URL}/${id}/status`, {
            method: 'PATCH',
            headers: getAuthHeaders(),
            body: JSON.stringify(statusData),
        });

        if (!res.ok) {
            throw new Error(`Erreur ${res.status}: ${res.statusText}`);
        }

        return res.json();
    } catch (error) {
        console.error('‚ùå Erreur mise √† jour statut:', error);
        throw error;
    }
};

// ‚úÖ R√©cup√©rer une r√©servation par ID
export const getBookingById = async (id) => {
    try {
        const res = await fetch(`${API_URL}/${id}`, {
            headers: getAuthHeaders(),
        });

        if (!res.ok) {
            throw new Error(`Erreur ${res.status}: ${res.statusText}`);
        }

        return res.json();
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration r√©servation:', error);
        throw error;
    }
};